[project]
name = "syncra"
dynamic = ["version"]
description = "A DAG framework written in std python"
authors = [
    {name = "Alex Epstein", email = "alexanderepstein@tuta.io"},
]
dependencies = []
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
src = ["src"]

[project.optional-dependencies]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.31",
    "mkdocs-gen-files>=0.5.0",
    "mkdocstrings>=0.25.2",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-autorefs>=1.0.1",
    "mkdocstrings-python>=1.10.8",
    "mkdocs-coverage>=1.1.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.6",
    "mkdocs-git-authors-plugin>=0.9.0",
]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm.version]
source = "file"
path = "src/syncra/__init__.py"

[tool.ruff]

src = ["src"]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.coverage.run]
branch = true
parallel = true

[tool.black]
line-length = 120

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

show_missing = true
ignore_errors = true


[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.6.1",
    "pre-commit>=3.5.0",
    "pyright>=1.1.376",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.8",
    "pytest-xdist>=3.6.1",
]

[tool.pdm.scripts]
pre-commit = "pre-commit run --all-files"
serve-document = "mkdocs serve"
document = "mkdocs build -d public/documentation"
deploy-document = "mkdocs gh-deploy -d public/documentation"
test = "pytest -n auto --cov-report term --cov-report xml:coverage.xml  --cov-report html:docs/development/coverage --cov=syncra"
format = {composite = ["ruff check . --fix", "ruff format"]}
release = {composite = ["pre-commit", "test", "document"]}

[too.isort]
profile = "black"
line_length = 120
skip_glob = ["docs/*"]

[tool.coverage.html]
directory = "docs/development/coverage"